#!/bin/bash
action=$1
target=$2
args=$@

BASE_DIR=/opt
ORIGINAL_PORT=9999
ORIGINAL_VERSION=v1.0.0
ORIGINAL_ENTRANCE=entrance
ORIGINAL_USERNAME=username
ORIGINAL_PASSWORD=password

# Language selection setup
LANG_FILE=".selected_language"
LANG_DIR="./lang"
AVAILABLE_LANGS=("en" "fa" "zh")

# Associative array for language names
declare -A LANG_NAMES
LANG_NAMES=( ["en"]="English" ["fa"]="Persian" ["zh"]="Chinese" )

# Check if the language is already selected and saved
if [ -f "$LANG_FILE" ]; then
    # Load the saved language
    selected_lang=$(cat "$LANG_FILE")
    echo "${LANG_ALREADY_SELECTED_MSG} ${LANG_NAMES[$selected_lang]}"
else
    # Prompt the user to select a language
    echo "$LANG_PROMPT_MSG"
    for i in "${!AVAILABLE_LANGS[@]}"; do
        lang_code="${AVAILABLE_LANGS[i]}"
        echo "$((i + 1)). ${LANG_NAMES[$lang_code]}"
    done

    read -p "$LANG_CHOICE_MSG" lang_choice

    if [[ $lang_choice -ge 1 && $lang_choice -le ${#AVAILABLE_LANGS[@]} ]]; then
        selected_lang=${AVAILABLE_LANGS[$((lang_choice - 1))]}
        echo "${LANG_SELECTED_CONFIRM_MSG} ${LANG_NAMES[$selected_lang]}"

        # Save the selected language to the file
        echo $selected_lang > $LANG_FILE
    else
        echo "$LANG_INVALID_MSG"
        selected_lang="en"
        echo $selected_lang > $LANG_FILE
    fi
fi

# Load the selected language file
LANGFILE="$LANG_DIR/$selected_lang.sh"

if [ -f "$LANGFILE" ]; then
    source "$LANGFILE"
else
    echo -e "${RED} $LANG_NOT_FOUND_MSG $LANGFILE${NC}"
    exit 1
fi

# Define functions for actions
function usage() {
    echo "$PANEL_CONTROL_SCRIPT"
    echo
    echo "Usage: "
    echo "  ./1pctl [COMMAND] [ARGS...]"
    echo "  ./1pctl --help"
    echo
    echo "Commands: "
    echo "  status              $PANEL_SERVICE_STATUS"
    echo "  start               $PANEL_SERVICE_START"
    echo "  stop                $PANEL_SERVICE_STOP"
    echo "  restart             $PANEL_SERVICE_RESTART"
    echo "  uninstall           $PANEL_SERVICE_UNINSTALL"
    echo "  user-info           $PANEL_SERVICE_USER_INFO"
    echo "  listen-ip           $PANEL_SERVICE_LISTEN_IP"
    echo "  version             $PANEL_SERVICE_VERSION"
    echo "  update              $PANEL_SERVICE_UPDATE"
    echo "  reset               $PANEL_SERVICE_RESET"
    echo "  restore             $PANEL_SERVICE_RESTORE"
}

function status() {
    systemctl status 1panel.service
}

function start() {
    systemctl start 1panel.service
    status
}

function stop() {
    systemctl stop 1panel.service
    status
}

function restart() {
    systemctl restart 1panel.service
    status
}

function uninstall() {
    read -p "$PANEL_SERVICE_UNINSTALL_NOTICE : " yn
    if [ "$yn" == "Y" ] || [ "$yn" == "y" ]; then
        echo -e "$PANEL_SERVICE_UNINSTALL_START"
        systemctl stop 1panel.service
        systemctl disable 1panel.service >/dev/null 2>&1
        echo -e "$PANEL_SERVICE_UNINSTALL_REMOVE"
        rm -rf $BASE_DIR/1panel /usr/local/bin/{1pctl,1panel} /etc/systemd/system/1panel.service
        systemctl daemon-reload
        systemctl reset-failed
        echo -e "$PANEL_SERVICE_UNINSTALL_SUCCESS"
    else
        exit 0
    fi
}

function user-info() {
    1panel user-info
}

function listen-ip() {
    case "${target}" in
        ipv4)
            1panel listen-ip ipv4
            restart
            ;;
        ipv6)
            1panel listen-ip ipv6
            restart
            ;;
        *)
            1panel listen-ip
            ;;
    esac
}

function restore() {
    read -p "$PANEL_SERVICE_RESTORE_NOTICE : " yn
    if [ "$yn" == "Y" ] || [ "$yn" == "y" ]; then
        1panel restore
        systemctl daemon-reload
        restart
        1panel version
    else
        exit 0
    fi
}

function version() {
    1panel version
}

function reset() {
    case "${target}" in
        domain)
            1panel reset domain
            ;;
        entrance)
            1panel reset entrance
            ;;
        https)
            1panel reset https
            restart
            ;;
        ips)
            1panel reset ips
            ;;
        mfa)
            1panel reset mfa
            ;;
        *)
            1panel reset
            ;;
    esac
}

function update() {
    case "${target}" in
        username)
            1panel update username
            ;;
        password)
            1panel update password
            ;;
        port)
            1panel update port
            ;;
        *)
            1panel update
            ;;
    esac
}

function main() {
    case "${action}" in
        status)
            status
            ;;
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        restore)
            restore
            ;;
        uninstall)
            uninstall
            ;;
        user-info)
            user-info
            ;;
        listen-ip)
            listen-ip
            ;;
        version)
            version
            ;;
        reset)
            reset
            ;;
        update)
            update
            ;;
        help)
            usage
            ;;
        --help)
            usage
            ;;
        "")
            usage
            ;;
        *)
            echo "$PANEL_SERVICE_UNSUPPORTED_PARAMETER"
            ;;
    esac
}

main
